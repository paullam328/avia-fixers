/**
 * This class is generated by jOOQ
 */
package com.aviafix.db.generated.tables;


import com.aviafix.db.DateConverter;
import com.aviafix.db.generated.Aviafixers;
import com.aviafix.db.generated.Keys;
import com.aviafix.db.generated.tables.records.HASPARTSRECORD;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HASPARTS extends TableImpl<HASPARTSRECORD> {

    private static final long serialVersionUID = 1716797482;

    /**
     * The reference instance of <code>AviaFixers.hasParts</code>
     */
    public static final HASPARTS HASPARTS = new HASPARTS();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HASPARTSRECORD> getRecordType() {
        return HASPARTSRECORD.class;
    }

    /**
     * The column <code>AviaFixers.hasParts.partNum</code>.
     */
    public final TableField<HASPARTSRECORD, Integer> PARTNUM = createField("partNum", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>AviaFixers.hasParts.partName</code>.
     */
    public final TableField<HASPARTSRECORD, String> PARTNAME = createField("partName", org.jooq.impl.SQLDataType.VARCHAR.length(20), this, "");

    /**
     * The column <code>AviaFixers.hasParts.repairStatus</code>.
     */
    public final TableField<HASPARTSRECORD, String> REPAIRSTATUS = createField("repairStatus", org.jooq.impl.SQLDataType.VARCHAR.length(20), this, "");

    /**
     * The column <code>AviaFixers.hasParts.repairCost</code>.
     */
    public final TableField<HASPARTSRECORD, Double> REPAIRCOST = createField("repairCost", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>AviaFixers.hasParts.sellPrice</code>.
     */
    public final TableField<HASPARTSRECORD, Double> SELLPRICE = createField("sellPrice", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>AviaFixers.hasParts.qty</code>.
     */
    public final TableField<HASPARTSRECORD, Integer> QTY = createField("qty", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>AviaFixers.hasParts.repairDate</code>.
     */
    public final TableField<HASPARTSRECORD, LocalDate> REPAIRDATE = createField("repairDate", org.jooq.impl.SQLDataType.DATE, this, "", new DateConverter());

    /**
     * The column <code>AviaFixers.hasParts.porderNum</code>.
     */
    public final TableField<HASPARTSRECORD, Integer> PORDERNUM = createField("porderNum", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>AviaFixers.hasParts</code> table reference
     */
    public HASPARTS() {
        this("hasParts", null);
    }

    /**
     * Create an aliased <code>AviaFixers.hasParts</code> table reference
     */
    public HASPARTS(String alias) {
        this(alias, HASPARTS);
    }

    private HASPARTS(String alias, Table<HASPARTSRECORD> aliased) {
        this(alias, aliased, null);
    }

    private HASPARTS(String alias, Table<HASPARTSRECORD> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Aviafixers.AVIAFIXERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<HASPARTSRECORD, Integer> getIdentity() {
        return Keys.IDENTITY_HASPARTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HASPARTSRECORD> getPrimaryKey() {
        return Keys.KEY_HASPARTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HASPARTSRECORD>> getKeys() {
        return Arrays.<UniqueKey<HASPARTSRECORD>>asList(Keys.KEY_HASPARTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<HASPARTSRECORD, ?>> getReferences() {
        return Arrays.<ForeignKey<HASPARTSRECORD, ?>>asList(Keys.PORDERNUM);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HASPARTS as(String alias) {
        return new HASPARTS(alias, this);
    }

    /**
     * Rename this table
     */
    public HASPARTS rename(String name) {
        return new HASPARTS(name, null);
    }
}
