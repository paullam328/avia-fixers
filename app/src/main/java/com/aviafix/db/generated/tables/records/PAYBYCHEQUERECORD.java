/**
 * This class is generated by jOOQ
 */
package com.aviafix.db.generated.tables.records;


import com.aviafix.db.generated.tables.PAYBYCHEQUE;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PAYBYCHEQUERECORD extends UpdatableRecordImpl<PAYBYCHEQUERECORD> implements Record3<Integer, String, Double> {

    private static final long serialVersionUID = -1145662477;

    /**
     * Setter for <code>AviaFixers.payByCheque.chequeNum</code>.
     */
    public void CHEQUENUM(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>AviaFixers.payByCheque.chequeNum</code>.
     */
    public Integer CHEQUENUM() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>AviaFixers.payByCheque.bank</code>.
     */
    public void BANK(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>AviaFixers.payByCheque.bank</code>.
     */
    public String BANK() {
        return (String) get(1);
    }

    /**
     * Setter for <code>AviaFixers.payByCheque.amount</code>.
     */
    public void AMOUNT(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>AviaFixers.payByCheque.amount</code>.
     */
    public Double AMOUNT() {
        return (Double) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, String, Double> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, String, Double> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return PAYBYCHEQUE.PAYBYCHEQUE.CHEQUENUM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return PAYBYCHEQUE.PAYBYCHEQUE.BANK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field3() {
        return PAYBYCHEQUE.PAYBYCHEQUE.AMOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return CHEQUENUM();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return BANK();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value3() {
        return AMOUNT();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PAYBYCHEQUERECORD value1(Integer value) {
        CHEQUENUM(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PAYBYCHEQUERECORD value2(String value) {
        BANK(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PAYBYCHEQUERECORD value3(Double value) {
        AMOUNT(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PAYBYCHEQUERECORD values(Integer value1, String value2, Double value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PAYBYCHEQUERECORD
     */
    public PAYBYCHEQUERECORD() {
        super(PAYBYCHEQUE.PAYBYCHEQUE);
    }

    /**
     * Create a detached, initialised PAYBYCHEQUERECORD
     */
    public PAYBYCHEQUERECORD(Integer CHEQUENUM, String BANK, Double AMOUNT) {
        super(PAYBYCHEQUE.PAYBYCHEQUE);

        set(0, CHEQUENUM);
        set(1, BANK);
        set(2, AMOUNT);
    }
}
